# -*- coding: utf-8 -*-
"""Project1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N3eX_tRuUbQxxxWDOykqZPsBfp2Dif3O
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
df=pd.read_csv('/content/train-data.csv')
df

df.head()

df.tail()

df.dtypes

df.isna().sum()

df['Name'].value_counts()

x=df['Name']
plt.hist(x,color='red')
plt.xlabel('Name')
plt.ylabel("Count")
plt.title('Name-Count Graph')

df['Location'].value_counts()

x=df['Location']
plt.hist(x,color='blue')
plt.xlabel('Location')
plt.ylabel("Count")
plt.title('Location-Count Graph')

df['Fuel_Type'].value_counts()

x=df['Fuel_Type']
plt.hist(x,color='green')
plt.xlabel('Fuel_Type')
plt.ylabel("Count")
plt.title('Fuel_Type-Count Graph')

df['Transmission'].value_counts()

x=df['Transmission']
plt.hist(x,color='black')
plt.xlabel('Transmission')
plt.ylabel("Count")
plt.title('Transmission-Count Graph')

df['Owner_Type'].value_counts()

x=df['Owner_Type']
plt.hist(x,color='purple')
plt.xlabel('Owner_Type')
plt.ylabel("Count")
plt.title('Owner-Count Graph')

df1=pd.get_dummies(df[['Location','Fuel_Type','Transmission','Owner_Type']],drop_first=True)
df1

dfe=pd.concat([df,df1],axis=1)
dfe

dfe.drop(['Unnamed: 0','Name','Location','Fuel_Type','Transmission','Owner_Type','New_Price','Fuel_Type_Electric'],axis=1,inplace=True)
dfe

dfe['Mileage']=dfe['Mileage'].str.replace('km/kg','')
dfe['Mileage']=dfe['Mileage'].str.replace('kmpl','')
dfe['Engine']=dfe['Engine'].str.replace('CC','')
dfe['Power']=dfe['Power'].str.replace('bhp','')
dfe['Power']=dfe['Power'].str.replace('null','0')
dfe['Mileage']=dfe['Mileage'].str.replace('null','0')
dfe

#change data type
dfe['Engine']=dfe['Engine'].astype(float)
dfe['Power']=dfe['Power'].astype(float)
dfe['Mileage']=dfe['Mileage'].astype(float)
dfe.dtypes

dfe.isna().sum()

#replacing all 0's as missing values
dfe.loc[dfe.Power==0,'Power']=np.NaN
dfe.loc[dfe.Mileage==0,'Mileage']=np.NaN

dfe.isna().sum()

dfe['Mileage']=dfe['Mileage'].fillna(dfe['Mileage'].mean())
dfe['Engine']=dfe['Engine'].fillna(dfe['Engine'].mean())
dfe['Power']=dfe['Power'].fillna(dfe['Power'].mean())
dfe['Seats']=dfe['Seats'].fillna(dfe['Seats'].mean())

dfe.isna().sum()

x1=dfe.drop(['Price'],axis=1)
x1.ndim

y1=dfe['Price'].values
y1

#preprocces the test data
df2=pd.read_csv('/content/test-data.csv')
df2

df2.dtypes

df2.head()

df2.tail()

df2.isna().sum()

df2['Name'].value_counts()

x=df['Name']
plt.hist(x)
plt.xlabel('Name')
plt.ylabel("Count")
plt.title('Name-Count Graph')

df2['Location'].value_counts()

x=df2['Location']
plt.hist(x,color='red')
plt.xlabel('Location')
plt.ylabel("Counts")
plt.title('Location-Count Graph')

df2['Fuel_Type'].value_counts()

x=df2['Fuel_Type']
plt.hist(x,color='green')
plt.xlabel('Fuel_Type')
plt.ylabel("Count")
plt.title('Fuel_Type-Count Graph')

df2['Transmission'].value_counts()

x=df2['Transmission']
plt.hist(x,color='yellow')
plt.xlabel('Transmission')
plt.ylabel("Count")
plt.title('Transmission-Count Graph')

df2['Owner_Type'].value_counts()

x=df['Owner_Type']
plt.hist(x,color='violet')
plt.xlabel('Owner_Type')
plt.ylabel("Count")
plt.title('Owner_Type-Count Graph')

df3=pd.get_dummies(df2[['Location','Fuel_Type','Transmission','Owner_Type']],drop_first=True)
df3

dfe1=pd.concat([df2,df3],axis=1)
dfe1

dfe1.drop(['Unnamed: 0','Name','Location','Fuel_Type','Transmission','Owner_Type','New_Price'],axis=1,inplace=True)
dfe1

dfe1['Mileage']=dfe1['Mileage'].str.replace('km/kg','')
dfe1['Mileage']=dfe1['Mileage'].str.replace('kmpl','')
dfe1['Mileage']=dfe1['Mileage'].str.replace('null','0')
dfe1['Engine']=dfe1['Engine'].str.replace('CC','')
dfe1['Power']=dfe1['Power'].str.replace('bhp','')
dfe1['Power']=dfe1['Power'].str.replace('null','0')

dfe1['Engine']=dfe1['Engine'].astype(float)
dfe1['Power']=dfe1['Power'].astype(float)
dfe1['Mileage']=dfe1['Mileage'].astype(float)
dfe1.dtypes

dfe1.isna().sum()

dfe1.loc[dfe1.Power==0,'Power']=np.NaN
dfe1.loc[dfe1.Mileage==0,'Mileage']=np.NaN

dfe1.isna().sum()

dfe1['Mileage']=dfe1['Mileage'].fillna(dfe1['Mileage'].mean())
dfe1['Engine']=dfe1['Engine'].fillna(dfe1['Engine'].mean())
dfe1['Power']=dfe1['Power'].fillna(dfe1['Power'].mean())
dfe1['Seats']=dfe1['Seats'].fillna(dfe1['Seats'].mean())

dfe1.isna().sum()

z=dfe1
z

from sklearn.linear_model import LinearRegression
lr=LinearRegression()
lr.fit(x1,y1)
y_pred=lr.predict(z)
y_pred